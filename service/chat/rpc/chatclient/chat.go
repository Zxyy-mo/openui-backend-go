// Code generated by goctl. DO NOT EDIT.
// Source: chat.proto

package chatclient

import (
	"context"

	"github.com/openui-backend-go/service/chat-rpc/chat"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CallRequest    = chat.CallRequest
	CallResponse   = chat.CallResponse
	CreateRequest  = chat.CreateRequest
	CreateResponse = chat.CreateResponse
	DetailRequest  = chat.DetailRequest
	DetailResponse = chat.DetailResponse
	Empty          = chat.Empty
	ListChats      = chat.ListChats
	ListPrompts    = chat.ListPrompts
	Prompt         = chat.Prompt
	RemoveRequest  = chat.RemoveRequest
	RemoveResponse = chat.RemoveResponse
	UpdateRequest  = chat.UpdateRequest
	UpdateResponse = chat.UpdateResponse

	Chat interface {
		Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
		Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
		Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error)
		Detail(ctx context.Context, in *DetailRequest, opts ...grpc.CallOption) (*DetailResponse, error)
		ListChat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListChats, error)
		ListPrompt(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListPrompts, error)
		Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error)
	}

	defaultChat struct {
		cli zrpc.Client
	}
)

func NewChat(cli zrpc.Client) Chat {
	return &defaultChat{
		cli: cli,
	}
}

func (m *defaultChat) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	client := chat.NewChatClient(m.cli.Conn())
	return client.Create(ctx, in, opts...)
}

func (m *defaultChat) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	client := chat.NewChatClient(m.cli.Conn())
	return client.Update(ctx, in, opts...)
}

func (m *defaultChat) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error) {
	client := chat.NewChatClient(m.cli.Conn())
	return client.Remove(ctx, in, opts...)
}

func (m *defaultChat) Detail(ctx context.Context, in *DetailRequest, opts ...grpc.CallOption) (*DetailResponse, error) {
	client := chat.NewChatClient(m.cli.Conn())
	return client.Detail(ctx, in, opts...)
}

func (m *defaultChat) ListChat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListChats, error) {
	client := chat.NewChatClient(m.cli.Conn())
	return client.ListChat(ctx, in, opts...)
}

func (m *defaultChat) ListPrompt(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListPrompts, error) {
	client := chat.NewChatClient(m.cli.Conn())
	return client.ListPrompt(ctx, in, opts...)
}

func (m *defaultChat) Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error) {
	client := chat.NewChatClient(m.cli.Conn())
	return client.Call(ctx, in, opts...)
}
