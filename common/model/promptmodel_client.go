// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
    "github.com/openui-backend-go/common/database"
    "strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	promptFieldNames          = builder.RawFieldNames(&Prompt{})
	promptRows                = strings.Join(promptFieldNames, ",")
	promptRowsExpectAutoSet   = strings.Join(stringx.Remove(promptFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	promptRowsWithPlaceHolder = strings.Join(stringx.Remove(promptFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cachePromptIdPrefix      = "cache:prompt:id:"
	cachePromptCommandPrefix = "cache:prompt:command:"
)

type (
	promptModel interface {
		Insert(ctx context.Context, data *Prompt) (error)
		FindOne(ctx context.Context, id int64) (*Prompt, error)
		Update(ctx context.Context, data *Prompt) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPromptModel struct {
        db *database.GormDao
        cache *database.DcRedisClient
        table string
	}

	Prompt struct {
		Id         int64     `db:"id"`
		Command    string    `db:"command"` // 命令
		UserId     string    `db:"user_id"` // 用户ID
		Title      string    `db:"title"`   // 标题
		Content    string    `db:"content"` // 文本
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
	}
)

func newPromptModel(conn *database.GormDao, cache *database.DcRedisClient) *defaultPromptModel {
	return &defaultPromptModel{
        db:   conn,
        cache: cache,
        table: "prompt",
	}
}

func (m *defaultPromptModel) Delete(ctx context.Context, id int64) error {
    prompt := &Prompt{Id: id}
    err := m.db.Delete(ctx, m.table, prompt, false)
    if err != nil {
        return err
    }
    return nil
}

func (m *defaultPromptModel) FindOne(ctx context.Context, id int64) (*Prompt, error) {
    prompt := Prompt{}
    sql := "id = ?"
    err := m.db.First(ctx, m.table, &prompt, sql, id)
    if err != nil {
        return nil, err
    }
    return &prompt, nil
}

func (m *defaultPromptModel) Insert(ctx context.Context, data *Prompt) (error) {
    err := m.db.Create(ctx, m.table, data)
    if err != nil {
        return err
    }
    return nil
}

func (m *defaultPromptModel) Update(ctx context.Context, newData *Prompt) error {
    err := m.db.Update(ctx, m.table, uint(newData.Id), newData)
    if err != nil {
        return err
    }
    return nil
}

func (m *defaultPromptModel) tableName() string {
	return m.table
}
