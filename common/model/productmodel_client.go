// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
    "github.com/zeromicro/go-zero/core/logc"
    "time"

	"github.com/openui-backend-go/common/database"
)

var (
	cacheProductIdPrefix = "cache:product:id:"
)

type (
	productModel interface {
		Insert(ctx context.Context, data *Product) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Product, error)
		Update(ctx context.Context, data *Product) error
		Delete(ctx context.Context, id int64) error
	}

	defaultProductModel struct {
		db    *database.GormDao
		cache *database.DcRedisClient
		table string
	}

	Product struct {
		Id         int64     `db:"id"`
		Name       string    `db:"name"`   // 模型名称
		Desc       string    `db:"desc"`   // 模型描述
		Status     int64     `db:"status"` // 模型状态 1:下载 0:未下载
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
	}
)

func newProductModel(conn *database.GormDao, c *database.DcRedisClient) *defaultProductModel {
	return &defaultProductModel{
		db: conn,
		cache: c,
		table:      "product",
	}
}

func (m *defaultProductModel) Delete(ctx context.Context, id int64) error {
	return nil
}

func (m *defaultProductModel) FindOne(ctx context.Context, id int64) (*Product, error) {
    var pro = Product{}
    sql := "id = ?"
    err := m.db.First(ctx, m.table, &pro, sql, id)
    if err != nil {
        logc.Error(ctx, "find product failed", err)
        return nil, err
    }
	return &pro, nil
}

func (m *defaultProductModel) Insert(ctx context.Context, data *Product) (sql.Result, error) {
	return nil, nil
}

func (m *defaultProductModel) Update(ctx context.Context, data *Product) error {
	return nil
}

func (m *defaultProductModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheProductIdPrefix, primary)
}

func (m *defaultProductModel) tableName() string {
	return m.table
}
